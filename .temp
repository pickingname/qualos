import axios from "axios";
import * as L from "leaflet";
import Papa from "papaparse"; // Import Papaparse for CSV parsing

let norm = 'https://api.p2pquake.net/v2/jma/quake?limit=1&order=-1&quake_type=ScaleAndDestination';
let dev = 'https://pickingname.github.io/testjson/p2pquake_v2_jma_scaleanddestination.json';
let p2p = 'https://api.p2pquake.net/v2/history?codes=551&codes=552&limit=1';

const fetchComparisonData = async () => {
  try {
    const response = await axios.get("/src/compare.json");
    return response.data;
  } catch (error) {
    console.error("Error fetching comparison data:", error);
    return [];
  }
};

// Function to parse CSV and return latitude and longitude based on station name
const parseCSV = async () => {
  try {
    const response = await axios.get("/src/compare_points.csv");
    const csvData = Papa.parse(response.data, { header: true }).data;
    return csvData;
  } catch (error) {
    console.error("Error parsing CSV:", error);
    return [];
  }
};

const findStationCoordinates = async (stationName) => {
  const csvData = await parseCSV();
  const station = csvData.find((entry) => entry.name === stationName);
  return station ? [parseFloat(station.lat), parseFloat(station.long)] : null;
};

(async () => {
  const response = await axios.get(p2p);

  const data = response.data;
  const _a = data[0];
  const latitude = _a.earthquake.hypocenter.latitude;
  const longitude = _a.earthquake.hypocenter.longitude;
  const maxScale = _a.earthquake.maxScale;
  const time = _a.earthquake.time;
  const depth =
    _a && _a.earthquake.hypocenter.depth === -1
      ? "unknown"
      : _a.earthquake.hypocenter.depth === 0
      ? "Very shallow"
      : `${_a.earthquake.hypocenter.depth}km`;
  const where = _a.earthquake.hypocenter.name;

  const _intensity = (maxScale) => {
    switch (maxScale) {
      case 10:
        return "1";
      case 20:
        return "2";
      case 30:
        return "3";
      case 40:
        return "4";
      case 45:
        return "5-";
      case 50:
        return "5+";
      case 55:
        return "6-";
      case 60:
        return "6+";
      case 70:
        return "7";
      default:
        return "?";
    }
  };

  const intensity = _intensity(maxScale);

  const comparisonData = await fetchComparisonData();
  const englishName = findEnglishName(comparisonData, where);

  document.getElementById("intensity").textContent = intensity;
  document.getElementById("time").textContent = `Time: ${time}`;
  document.getElementById("depth").textContent = `Depth: ${depth}`;
  document.getElementById("where").textContent = `${englishName}`;

  var epicenter = L.icon({
    iconUrl: "/src/icons/epicenter.png",
    iconSize: [30, 30],
  });

  var map = L.map("map", {
    zoomControl: false,
    attributionControl: false,
  }).setView([latitude, longitude], 8);

  L.marker([latitude, longitude], { icon: epicenter }).addTo(map);

  const stationPoints = _a.points;
  for (const point of stationPoints) {
    const stationName = point.addr;
    const coordinates = await findStationCoordinates(stationName);
    if (coordinates) {
      L.marker(coordinates).addTo(map);
    }
  }

  L.tileLayer(
    "https://{s}.basemaps.cartocdn.com/dark_nolabels/{z}/{x}/{y}{r}.png'",
    {
      maxZoom: 19,
    }
  ).addTo(map);
})();
